spring.application.name=api-gateway
server.port=9000

# Eureka setup for LOCAL
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka
#eureka.instance.hostname=localhost
#--------Common-----------#
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${server.port}
# Enable gateway auto-routing#Docker TEST
eureka.client.service-url.defaultZone=${EUREKA_URL:http://main-eureka-server:8761/eureka/}


##########################################
# Fix Swagger behind Gateway (optional but recommended)
server.forward-headers-strategy=framework

# Aggregated Swagger URLs for each microservice
springdoc.swagger-ui.urls[0].name=Inventory Service
springdoc.swagger-ui.urls[0].url=/aggregate/inventory-service/v3/api-docs

springdoc.swagger-ui.urls[1].name=Order Service
springdoc.swagger-ui.urls[1].url=/aggregate/order-service/v3/api-docs

springdoc.swagger-ui.urls[2].name=Product Service
springdoc.swagger-ui.urls[2].url=/aggregate/product-service/v3/api-docs
# Enable Swagger aggregation

# Optional: if you have CORS issues (allow all only works in Spring MVC, not reliably in Spring Cloud Gateway.)
#spring.web.cors.allowed-origins=*
#spring.web.cors.allowed-methods=*
# (You can also add a global CORS config class instead)
#Java-based CORS config for Spring Cloud Gateway,In your API Gateway, add this @Configuration class:

eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
#SpringDoc Gateway Integration
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
# Swagger UI aggregation
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.api-docs.override-with-gateway-url=true
springdoc.api-docs.default-url=http://localhost:9000
springdoc.api-docs.version=OPENAPI_3_0





























